name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    # Run on ANY pull request, regardless of target branch
  schedule:
    # Run security checks weekly on Mondays at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Allow manual trigger with optional inputs
    inputs:
      run_security_scan:
        description: 'Run full security scan'
        required: false
        default: 'true'
        type: boolean
      create_build:
        description: 'Create build artifact'
        required: false
        default: 'true'
        type: boolean

jobs:
  # Lint and validate code quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install ESLint
        run: npm install -g eslint
      
      - name: Run ESLint
        run: |
          eslint content.js popup.js background.js --format stylish || true
        continue-on-error: true
      
      - name: Validate manifest.json
        run: |
          node -e "JSON.parse(require('fs').readFileSync('manifest.json', 'utf8'))"
          echo "✓ manifest.json is valid JSON"
      
      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          grep -rn "TODO\|FIXME" *.js *.html || echo "No TODO/FIXME found"

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    # Allow skipping security scan in manual runs
    if: ${{ !github.event.inputs.run_security_scan || github.event.inputs.run_security_scan == 'true' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      # Scan for secrets and sensitive data
      - name: GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Dependency vulnerability scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Check for known malicious packages
      - name: Socket Security Scan
        if: github.event_name != 'schedule'
        run: |
          echo "Checking for malicious dependencies..."
          # For now just a placeholder - would need Socket.dev integration
          echo "✓ No package.json dependencies to scan"
      
      # Validate CSP and permissions
      - name: Validate Content Security Policy
        run: |
          echo "Checking manifest security settings..."
          node -e "
            const manifest = JSON.parse(require('fs').readFileSync('manifest.json', 'utf8'));
            
            // Check for overly broad permissions
            const permissions = manifest.permissions || [];
            const dangerousPerms = ['<all_urls>', 'tabs', 'browsingData', 'cookies'];
            const found = permissions.filter(p => dangerousPerms.includes(p));
            if (found.length > 0) {
              console.warn('⚠️  Warning: Found broad permissions:', found);
            }
            
            // Verify host_permissions are specific
            const hosts = manifest.host_permissions || [];
            if (hosts.includes('<all_urls>')) {
              console.error('❌ Error: <all_urls> permission is too broad');
              process.exit(1);
            }
            
            console.log('✓ Manifest permissions look reasonable');
          "

  # Build and package extension
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [lint, security]
    # Allow skipping build in manual runs, and handle when security is skipped
    if: |
      always() && 
      needs.lint.result == 'success' && 
      (needs.security.result == 'success' || needs.security.result == 'skipped') &&
      (!github.event.inputs.create_build || github.event.inputs.create_build == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Create build directory
        run: mkdir -p dist
      
      - name: Copy extension files
        run: |
          cp manifest.json dist/
          cp content.js dist/
          cp popup.js dist/
          cp popup.html dist/
          cp background.js dist/
          cp -r icons dist/ 2>/dev/null || echo "No icons directory"
      
      - name: Validate extension structure
        run: |
          echo "Checking required files..."
          test -f dist/manifest.json || exit 1
          test -f dist/popup.html || exit 1
          test -f dist/popup.js || exit 1
          test -f dist/content.js || exit 1
          test -f dist/background.js || exit 1
          echo "✓ All required files present"
      
      - name: Calculate file sizes
        run: |
          echo "Extension file sizes:"
          du -h dist/*
          total=$(du -sh dist | cut -f1)
          echo "Total size: $total"
      
      - name: Create ZIP package
        run: |
          cd dist
          zip -r ../reposhield-${{ github.sha }}.zip .
          cd ..
          ls -lh reposhield-*.zip
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: reposhield-*.zip
          retention-days: 30

  # Test extension functionality
  test:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Test JavaScript syntax
        run: |
          echo "Testing JavaScript files for syntax errors..."
          node -c content.js
          node -c popup.js
          node -c background.js
          echo "✓ All JavaScript files are syntactically valid"
      
      - name: Test HTML validity
        run: |
          echo "Checking HTML structure..."
          grep -q "<!DOCTYPE html>" popup.html || exit 1
          grep -q "</html>" popup.html || exit 1
          echo "✓ HTML structure is valid"
      
      - name: Verify API endpoints
        run: |
          echo "Testing OSV.dev API availability..."
          response=$(curl -s -w "%{http_code}" -X POST https://api.osv.dev/v1/query \
            -H "Content-Type: application/json" \
            -d '{"version":"1.0.0","package":{"name":"test","ecosystem":"npm"}}')
          http_code="${response: -3}"
          if [ "$http_code" -eq 200 ]; then
            echo "✓ OSV.dev API is reachable and responding"
          else
            echo "⚠ OSV.dev API returned HTTP $http_code (may be expected for test query)"
          fi
          
          echo "Testing GitHub API availability..."
          curl -f -s https://api.github.com/rate_limit > /dev/null || exit 1
          echo "✓ GitHub API is reachable"
      
      - name: Test manifest compatibility
        run: |
          node -e "
            const manifest = JSON.parse(require('fs').readFileSync('manifest.json', 'utf8'));
            if (manifest.manifest_version !== 3) {
              console.error('❌ Only Manifest V3 is supported');
              process.exit(1);
            }
            console.log('✓ Manifest V3 detected');
          "

  # SAST - Static Application Security Testing
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Generate security report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security, test]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Run Information" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Actor: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scans Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret scanning (GitLeaks)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scanning (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Static analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Manifest validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "## Manual Run Options" >> $GITHUB_STEP_SUMMARY
            echo "- Security scan: ${{ github.event.inputs.run_security_scan }}" >> $GITHUB_STEP_SUMMARY
            echo "- Create build: ${{ github.event.inputs.create_build }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Automated release on tags
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: extension-build
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: reposhield-*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
